import numpy as np

# Параметры системы
lambda_ = 30  # интенсивность потока заявок (1/с)
mu = 6  # производительность канала (1/с)
n = 3  # количество каналов
m = 2  # размер очереди
total_time = 100  # общее время наблюдения (с)

# Счетчики системы
t = 0  # время
N = 0  # количество поступивших заявок
M = 0  # количество обслуженных заявок
k = 0  # количество занятых каналов
r = 0  # количество занятых мест в очереди
refusals = 0  # количество отказов


# Функция для генерации времени до следующего события
def generate_interval(intensity):
    return -np.log(1 - np.random.uniform(0, 1)) / intensity


# Имитация работы системы
while t < total_time:
    if k == 0:  # Если каналы свободны
        delta_t = generate_interval(lambda_)
        N += 1
        M += 1
        k += 1
        t += delta_t
    else:  # Если есть занятые каналы
        delta_t = generate_interval(lambda_)
        delta_tau = generate_interval(k * mu)

        if delta_t < delta_tau:  # Поступление новой заявки
            t += delta_t
            N += 1
            if k < n:  # Есть свободный канал
                M += 1
                k += 1
            elif r < m:  # Есть место в очереди
                M += 1
                r += 1
            else:  # Отказ
                refusals += 1
        else:  # Заявка обслужена
            t += delta_tau
            if r == 0:  # Освобождается канал
                k -= 1
            else:  # Заявка из очереди переходит на обслуживание
                r -= 1
                k = min(n, k + 1)  # Переход заявки из очереди на обслуживание

    # Вывод промежуточных результатов
    print(f"Время: {t:.2f} с, Обработано заявок: {M}, Занято каналов: {k}, В очереди: {r}, Отказано: {refusals}")

# Расчет вероятности отказа
q = refusals / N if N > 0 else 0
print(f"Вероятность отказа: {q}")
